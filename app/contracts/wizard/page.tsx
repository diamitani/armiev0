"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import {
  Wand2,
  ArrowLeft,
  ArrowRight,
  FileText,
  Users,
  Calendar,
  DollarSign,
  Settings,
  Download,
  CheckCircle,
} from "lucide-react"
import Link from "next/link"

const contractTypes = [
  {
    id: "performance",
    title: "Performance Contract",
    description: "For live shows, gigs, and performances",
    complexity: "Medium",
    icon: "🎤",
  },
  {
    id: "production",
    title: "Production Agreement",
    description: "For recording and production services",
    complexity: "High",
    icon: "🎵",
  },
  {
    id: "management",
    title: "Management Contract",
    description: "For artist-manager relationships",
    complexity: "High",
    icon: "👥",
  },
  {
    id: "sponsorship",
    title: "Sponsorship Deal",
    description: "For brand partnerships and endorsements",
    complexity: "Medium",
    icon: "🤝",
  },
  {
    id: "recording",
    title: "Recording Contract",
    description: "For label deals and recording agreements",
    complexity: "High",
    icon: "💿",
  },
  {
    id: "licensing",
    title: "Licensing Agreement",
    description: "For music licensing and sync deals",
    complexity: "Medium",
    icon: "📄",
  },
]

export default function ContractWizard() {
  const [currentStep, setCurrentStep] = useState(1)
  const [formData, setFormData] = useState({
    contractType: "",
    // Party 1 (Artist)
    artist_name: "",
    artist_address: "",
    artist_email: "",
    // Party 2 (Other Party)
    other_party_name: "",
    other_party_address: "",
    other_party_email: "",
    other_party_type: "",
    // Contract Details
    event_date: "",
    event_venue: "",
    event_duration: "",
    compensation_amount: "",
    compensation_type: "",
    payment_schedule: "",
    // Additional Terms
    cancellation_policy: "",
    force_majeure: true,
    exclusivity: false,
    additional_terms: "",
  })
  const [generatedContract, setGeneratedContract] = useState("")

  const totalSteps = 5
  const progress = (currentStep / totalSteps) * 100

  const handleInputChange = (field: string, value: string | boolean) => {
    setFormData((prev) => ({ ...prev, [field]: value }))
  }

  const nextStep = () => {
    if (currentStep < totalSteps) {
      setCurrentStep(currentStep + 1)
    }
  }

  const prevStep = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1)
    }
  }

  const generateContract = async () => {
    try {
      // Generate the actual contract content
      const selectedContract = contractTypes.find((t) => t.id === formData.contractType)

      const contractContent = `
${selectedContract?.title.toUpperCase() || "CONTRACT"}

This ${selectedContract?.title || "Contract"} is entered into on ${new Date().toLocaleDateString()} between:

PARTY 1 (Artist):
Name: ${formData.artist_name}
Address: ${formData.artist_address}
Email: ${formData.artist_email}

PARTY 2 (${formData.other_party_type}):
Name: ${formData.other_party_name}
Address: ${formData.other_party_address}
Email: ${formData.other_party_email}

EVENT/SERVICE DETAILS:
Date: ${formData.event_date}
Venue/Location: ${formData.event_venue}
Duration: ${formData.event_duration}

COMPENSATION:
Type: ${formData.compensation_type}
Amount: ${formData.compensation_amount}
Payment Schedule: ${formData.payment_schedule}

ADDITIONAL TERMS:
Cancellation Policy: ${formData.cancellation_policy}
Force Majeure: ${formData.force_majeure ? "Included" : "Not Included"}
Exclusivity: ${formData.exclusivity ? "Yes" : "No"}

${formData.additional_terms ? `Additional Terms: ${formData.additional_terms}` : ""}

SIGNATURES:
Artist: ___________________________ Date: ___________
${formData.other_party_type}: ___________________________ Date: ___________

This contract is generated by ARMIE and should be reviewed by legal counsel before execution.
    `.trim()

      // Store the generated contract
      setGeneratedContract(contractContent)
      setCurrentStep(totalSteps + 1)
    } catch (error) {
      console.error("Error generating contract:", error)
    }
  }

  const downloadContract = () => {
    if (!generatedContract) return

    const blob = new Blob([generatedContract], { type: "text/plain" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `${contractTypes.find((t) => t.id === formData.contractType)?.title.replace(/\s+/g, "_") || "Contract"}_${formData.artist_name.replace(/\s+/g, "_")}_${new Date().toISOString().split("T")[0]}.txt`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  const renderStep = () => {
    switch (currentStep) {
      case 1:
        return (
          <div className="space-y-6">
            <div>
              <h2 className="text-2xl font-bold mb-2">Choose Contract Type</h2>
              <p className="text-muted-foreground">Select the type of contract you need to create</p>
            </div>
            <div className="grid gap-4 md:grid-cols-2">
              {contractTypes.map((type) => (
                <Card
                  key={type.id}
                  className={`cursor-pointer transition-all hover:shadow-md ${
                    formData.contractType === type.id ? "ring-2 ring-purple-600 bg-purple-50" : ""
                  }`}
                  onClick={() => handleInputChange("contractType", type.id)}
                >
                  <CardHeader className="pb-3">
                    <div className="flex items-center justify-between">
                      <div className="text-2xl">{type.icon}</div>
                      <Badge
                        variant={
                          type.complexity === "High"
                            ? "destructive"
                            : type.complexity === "Medium"
                              ? "default"
                              : "secondary"
                        }
                      >
                        {type.complexity}
                      </Badge>
                    </div>
                    <CardTitle className="text-lg">{type.title}</CardTitle>
                    <CardDescription>{type.description}</CardDescription>
                  </CardHeader>
                </Card>
              ))}
            </div>
          </div>
        )

      case 2:
        return (
          <div className="space-y-6">
            <div>
              <h2 className="text-2xl font-bold mb-2">Party Information</h2>
              <p className="text-muted-foreground">Enter details for both parties in the contract</p>
            </div>
            <div className="grid gap-6 md:grid-cols-2">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Users className="h-5 w-5" />
                    Artist Information
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <Label htmlFor="artist_name">Full Name</Label>
                    <Input
                      id="artist_name"
                      value={formData.artist_name}
                      onChange={(e) => handleInputChange("artist_name", e.target.value)}
                      placeholder="Enter artist name"
                    />
                  </div>
                  <div>
                    <Label htmlFor="artist_address">Address</Label>
                    <Textarea
                      id="artist_address"
                      value={formData.artist_address}
                      onChange={(e) => handleInputChange("artist_address", e.target.value)}
                      placeholder="Enter full address"
                      rows={3}
                    />
                  </div>
                  <div>
                    <Label htmlFor="artist_email">Email</Label>
                    <Input
                      id="artist_email"
                      type="email"
                      value={formData.artist_email}
                      onChange={(e) => handleInputChange("artist_email", e.target.value)}
                      placeholder="Enter email address"
                    />
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Users className="h-5 w-5" />
                    Other Party Information
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <Label htmlFor="other_party_type">Party Type</Label>
                    <Select
                      value={formData.other_party_type}
                      onValueChange={(value) => handleInputChange("other_party_type", value)}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select party type" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="venue">Venue</SelectItem>
                        <SelectItem value="manager">Manager</SelectItem>
                        <SelectItem value="producer">Producer</SelectItem>
                        <SelectItem value="label">Record Label</SelectItem>
                        <SelectItem value="sponsor">Sponsor</SelectItem>
                        <SelectItem value="agent">Agent</SelectItem>
                        <SelectItem value="other">Other</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div>
                    <Label htmlFor="other_party_name">Name/Company</Label>
                    <Input
                      id="other_party_name"
                      value={formData.other_party_name}
                      onChange={(e) => handleInputChange("other_party_name", e.target.value)}
                      placeholder="Enter name or company"
                    />
                  </div>
                  <div>
                    <Label htmlFor="other_party_address">Address</Label>
                    <Textarea
                      id="other_party_address"
                      value={formData.other_party_address}
                      onChange={(e) => handleInputChange("other_party_address", e.target.value)}
                      placeholder="Enter full address"
                      rows={3}
                    />
                  </div>
                  <div>
                    <Label htmlFor="other_party_email">Email</Label>
                    <Input
                      id="other_party_email"
                      type="email"
                      value={formData.other_party_email}
                      onChange={(e) => handleInputChange("other_party_email", e.target.value)}
                      placeholder="Enter email address"
                    />
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        )

      case 3:
        return (
          <div className="space-y-6">
            <div>
              <h2 className="text-2xl font-bold mb-2">Event & Performance Details</h2>
              <p className="text-muted-foreground">Specify the details of the event or service</p>
            </div>
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Calendar className="h-5 w-5" />
                  Event Information
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid gap-4 md:grid-cols-2">
                  <div>
                    <Label htmlFor="event_date">Event Date</Label>
                    <Input
                      id="event_date"
                      type="date"
                      value={formData.event_date}
                      onChange={(e) => handleInputChange("event_date", e.target.value)}
                    />
                  </div>
                  <div>
                    <Label htmlFor="event_duration">Duration</Label>
                    <Input
                      id="event_duration"
                      value={formData.event_duration}
                      onChange={(e) => handleInputChange("event_duration", e.target.value)}
                      placeholder="e.g., 2 hours, 45 minutes"
                    />
                  </div>
                </div>
                <div>
                  <Label htmlFor="event_venue">Venue/Location</Label>
                  <Textarea
                    id="event_venue"
                    value={formData.event_venue}
                    onChange={(e) => handleInputChange("event_venue", e.target.value)}
                    placeholder="Enter venue name and address"
                    rows={3}
                  />
                </div>
              </CardContent>
            </Card>
          </div>
        )

      case 4:
        return (
          <div className="space-y-6">
            <div>
              <h2 className="text-2xl font-bold mb-2">Compensation & Payment</h2>
              <p className="text-muted-foreground">Define the financial terms of the agreement</p>
            </div>
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <DollarSign className="h-5 w-5" />
                  Payment Terms
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid gap-4 md:grid-cols-2">
                  <div>
                    <Label htmlFor="compensation_type">Compensation Type</Label>
                    <Select
                      value={formData.compensation_type}
                      onValueChange={(value) => handleInputChange("compensation_type", value)}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select compensation type" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="fixed">Fixed Fee</SelectItem>
                        <SelectItem value="hourly">Hourly Rate</SelectItem>
                        <SelectItem value="percentage">Percentage</SelectItem>
                        <SelectItem value="royalty">Royalty</SelectItem>
                        <SelectItem value="door">Door Split</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div>
                    <Label htmlFor="compensation_amount">Amount</Label>
                    <Input
                      id="compensation_amount"
                      value={formData.compensation_amount}
                      onChange={(e) => handleInputChange("compensation_amount", e.target.value)}
                      placeholder="Enter amount or percentage"
                    />
                  </div>
                </div>
                <div>
                  <Label htmlFor="payment_schedule">Payment Schedule</Label>
                  <Select
                    value={formData.payment_schedule}
                    onValueChange={(value) => handleInputChange("payment_schedule", value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select payment schedule" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="advance">50% Advance, 50% on completion</SelectItem>
                      <SelectItem value="completion">Full payment on completion</SelectItem>
                      <SelectItem value="monthly">Monthly payments</SelectItem>
                      <SelectItem value="milestone">Milestone-based</SelectItem>
                      <SelectItem value="custom">Custom schedule</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </CardContent>
            </Card>
          </div>
        )

      case 5:
        return (
          <div className="space-y-6">
            <div>
              <h2 className="text-2xl font-bold mb-2">Additional Terms</h2>
              <p className="text-muted-foreground">Customize additional clauses and terms</p>
            </div>
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Settings className="h-5 w-5" />
                  Contract Clauses
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <Label htmlFor="cancellation_policy">Cancellation Policy</Label>
                  <Select
                    value={formData.cancellation_policy}
                    onValueChange={(value) => handleInputChange("cancellation_policy", value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select cancellation policy" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="standard">Standard (48 hours notice)</SelectItem>
                      <SelectItem value="strict">Strict (7 days notice)</SelectItem>
                      <SelectItem value="flexible">Flexible (24 hours notice)</SelectItem>
                      <SelectItem value="custom">Custom policy</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-3">
                  <div className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      id="force_majeure"
                      checked={formData.force_majeure}
                      onChange={(e) => handleInputChange("force_majeure", e.target.checked)}
                      className="rounded"
                    />
                    <Label htmlFor="force_majeure">Include Force Majeure clause</Label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      id="exclusivity"
                      checked={formData.exclusivity}
                      onChange={(e) => handleInputChange("exclusivity", e.target.checked)}
                      className="rounded"
                    />
                    <Label htmlFor="exclusivity">Exclusivity agreement</Label>
                  </div>
                </div>
                <div>
                  <Label htmlFor="additional_terms">Additional Terms</Label>
                  <Textarea
                    id="additional_terms"
                    value={formData.additional_terms}
                    onChange={(e) => handleInputChange("additional_terms", e.target.value)}
                    placeholder="Enter any additional terms or special conditions"
                    rows={4}
                  />
                </div>
              </CardContent>
            </Card>
          </div>
        )

      case 6:
        return (
          <div className="space-y-6 text-center">
            <div className="flex justify-center">
              <CheckCircle className="h-16 w-16 text-green-500" />
            </div>
            <div>
              <h2 className="text-2xl font-bold mb-2">Contract Generated Successfully!</h2>
              <p className="text-muted-foreground">Your custom contract has been created and is ready for download</p>
            </div>
            <Card>
              <CardHeader>
                <CardTitle>Contract Summary</CardTitle>
              </CardHeader>
              <CardContent className="text-left space-y-2">
                <div className="flex justify-between">
                  <span className="font-medium">Contract Type:</span>
                  <span>{contractTypes.find((t) => t.id === formData.contractType)?.title}</span>
                </div>
                <div className="flex justify-between">
                  <span className="font-medium">Artist:</span>
                  <span>{formData.artist_name}</span>
                </div>
                <div className="flex justify-between">
                  <span className="font-medium">Other Party:</span>
                  <span>{formData.other_party_name}</span>
                </div>
                <div className="flex justify-between">
                  <span className="font-medium">Event Date:</span>
                  <span>{formData.event_date}</span>
                </div>
                <div className="flex justify-between">
                  <span className="font-medium">Compensation:</span>
                  <span>{formData.compensation_amount}</span>
                </div>
              </CardContent>
            </Card>
            <div className="flex gap-4 justify-center">
              <Button className="bg-purple-600 hover:bg-purple-700" onClick={downloadContract}>
                <Download className="mr-2 h-4 w-4" />
                Download Contract
              </Button>
              <Link href="/contracts">
                <Button variant="outline">
                  <FileText className="mr-2 h-4 w-4" />
                  Browse More Contracts
                </Button>
              </Link>
            </div>
          </div>
        )

      default:
        return null
    }
  }

  return (
    <div className="max-w-4xl mx-auto space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <Link href="/contracts" className="flex items-center text-muted-foreground hover:text-foreground mb-2">
            <ArrowLeft className="mr-2 h-4 w-4" />
            Back to Contracts
          </Link>
          <h1 className="text-3xl font-bold tracking-tight flex items-center gap-3">
            <Wand2 className="h-8 w-8 text-purple-600" />
            Contract Wizard
          </h1>
          <p className="text-muted-foreground">Create a custom contract in 5 easy steps</p>
        </div>
      </div>

      {/* Progress */}
      {currentStep <= totalSteps && (
        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-medium">
                Step {currentStep} of {totalSteps}
              </span>
              <span className="text-sm text-muted-foreground">{Math.round(progress)}% complete</span>
            </div>
            <Progress value={progress} className="h-2" />
          </CardContent>
        </Card>
      )}

      {/* Step Content */}
      <Card>
        <CardContent className="pt-6">{renderStep()}</CardContent>
      </Card>

      {/* Navigation */}
      {currentStep <= totalSteps && (
        <div className="flex justify-between">
          <Button variant="outline" onClick={prevStep} disabled={currentStep === 1}>
            <ArrowLeft className="mr-2 h-4 w-4" />
            Previous
          </Button>
          <Button
            onClick={currentStep === totalSteps ? generateContract : nextStep}
            className="bg-purple-600 hover:bg-purple-700"
            disabled={currentStep === 1 && !formData.contractType}
          >
            {currentStep === totalSteps ? (
              <>
                <Wand2 className="mr-2 h-4 w-4" />
                Generate Contract
              </>
            ) : (
              <>
                Next
                <ArrowRight className="ml-2 h-4 w-4" />
              </>
            )}
          </Button>
        </div>
      )}

      {/* Legal Disclaimer */}
      <Card className="border-yellow-200 bg-yellow-50">
        <CardContent className="pt-6">
          <div className="flex items-start gap-3">
            <div className="w-6 h-6 rounded-full bg-yellow-500 flex items-center justify-center flex-shrink-0 mt-0.5">
              <span className="text-white text-sm font-bold">!</span>
            </div>
            <div>
              <h4 className="font-semibold text-yellow-800 mb-1">Legal Disclaimer</h4>
              <p className="text-sm text-yellow-700">
                This wizard generates contract templates for informational purposes only. Always consult with a
                qualified attorney before using any legal document. The generated contracts should be reviewed and
                customized by legal professionals before execution.
              </p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}
